<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>futex_wait_queue_me (256 samples, 0.41%)</title><rect x="26.1123%" y="405" width="0.4116%" height="15" fill="rgb(227,0,7)"/><text x="26.3623%" y="415.50"></text></g><g><title>schedule (225 samples, 0.36%)</title><rect x="26.1622%" y="389" width="0.3618%" height="15" fill="rgb(217,0,24)"/><text x="26.4122%" y="399.50"></text></g><g><title>__schedule (206 samples, 0.33%)</title><rect x="26.1927%" y="373" width="0.3312%" height="15" fill="rgb(221,193,54)"/><text x="26.4427%" y="383.50"></text></g><g><title>finish_task_switch (157 samples, 0.25%)</title><rect x="26.2715%" y="357" width="0.2525%" height="15" fill="rgb(248,212,6)"/><text x="26.5215%" y="367.50"></text></g><g><title>futex_wait (348 samples, 0.56%)</title><rect x="26.0352%" y="421" width="0.5596%" height="15" fill="rgb(208,68,35)"/><text x="26.2852%" y="431.50"></text></g><g><title>__x64_sys_futex (425 samples, 0.68%)</title><rect x="25.9628%" y="453" width="0.6834%" height="15" fill="rgb(232,128,0)"/><text x="26.2128%" y="463.50"></text></g><g><title>do_futex (403 samples, 0.65%)</title><rect x="25.9982%" y="437" width="0.6480%" height="15" fill="rgb(207,160,47)"/><text x="26.2482%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (516 samples, 0.83%)</title><rect x="25.8760%" y="485" width="0.8297%" height="15" fill="rgb(228,23,34)"/><text x="26.1260%" y="495.50"></text></g><g><title>do_syscall_64 (516 samples, 0.83%)</title><rect x="25.8760%" y="469" width="0.8297%" height="15" fill="rgb(218,30,26)"/><text x="26.1260%" y="479.50"></text></g><g><title>rdis (16,618 samples, 26.72%)</title><rect x="0.0000%" y="501" width="26.7218%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="511.50">rdis</text></g><g><title>__x64_sys_futex (2,581 samples, 4.15%)</title><rect x="88.4610%" y="453" width="4.1503%" height="15" fill="rgb(250,228,42)"/><text x="88.7110%" y="463.50">__x64..</text></g><g><title>do_futex (2,571 samples, 4.13%)</title><rect x="88.4771%" y="437" width="4.1342%" height="15" fill="rgb(240,193,28)"/><text x="88.7271%" y="447.50">do_fu..</text></g><g><title>futex_wake (2,526 samples, 4.06%)</title><rect x="88.5494%" y="421" width="4.0618%" height="15" fill="rgb(216,20,37)"/><text x="88.7994%" y="431.50">fute..</text></g><g><title>wake_up_q (2,437 samples, 3.92%)</title><rect x="88.6925%" y="405" width="3.9187%" height="15" fill="rgb(206,188,39)"/><text x="88.9425%" y="415.50">wake..</text></g><g><title>try_to_wake_up (2,434 samples, 3.91%)</title><rect x="88.6974%" y="389" width="3.9139%" height="15" fill="rgb(217,207,13)"/><text x="88.9474%" y="399.50">try_..</text></g><g><title>_raw_spin_unlock_irqrestore (2,422 samples, 3.89%)</title><rect x="88.7167%" y="373" width="3.8946%" height="15" fill="rgb(231,73,38)"/><text x="88.9667%" y="383.50">_raw..</text></g><g><title>sockfd_lookup_light (136 samples, 0.22%)</title><rect x="92.9586%" y="421" width="0.2187%" height="15" fill="rgb(225,20,46)"/><text x="93.2086%" y="431.50"></text></g><g><title>__fget_light (120 samples, 0.19%)</title><rect x="92.9843%" y="405" width="0.1930%" height="15" fill="rgb(210,31,41)"/><text x="93.2343%" y="415.50"></text></g><g><title>__fget (70 samples, 0.11%)</title><rect x="93.0647%" y="389" width="0.1126%" height="15" fill="rgb(221,200,47)"/><text x="93.3147%" y="399.50"></text></g><g><title>ip_finish_output2 (91 samples, 0.15%)</title><rect x="93.4410%" y="261" width="0.1463%" height="15" fill="rgb(226,26,5)"/><text x="93.6910%" y="271.50"></text></g><g><title>__local_bh_enable_ip (70 samples, 0.11%)</title><rect x="93.4747%" y="245" width="0.1126%" height="15" fill="rgb(249,33,26)"/><text x="93.7247%" y="255.50"></text></g><g><title>do_softirq.part.19 (70 samples, 0.11%)</title><rect x="93.4747%" y="229" width="0.1126%" height="15" fill="rgb(235,183,28)"/><text x="93.7247%" y="239.50"></text></g><g><title>do_softirq_own_stack (68 samples, 0.11%)</title><rect x="93.4779%" y="213" width="0.1093%" height="15" fill="rgb(221,5,38)"/><text x="93.7279%" y="223.50"></text></g><g><title>__softirqentry_text_start (68 samples, 0.11%)</title><rect x="93.4779%" y="197" width="0.1093%" height="15" fill="rgb(247,18,42)"/><text x="93.7279%" y="207.50"></text></g><g><title>net_rx_action (66 samples, 0.11%)</title><rect x="93.4812%" y="181" width="0.1061%" height="15" fill="rgb(241,131,45)"/><text x="93.7312%" y="191.50"></text></g><g><title>__ip_queue_xmit (113 samples, 0.18%)</title><rect x="93.4136%" y="293" width="0.1817%" height="15" fill="rgb(249,31,29)"/><text x="93.6636%" y="303.50"></text></g><g><title>ip_output (98 samples, 0.16%)</title><rect x="93.4377%" y="277" width="0.1576%" height="15" fill="rgb(225,111,53)"/><text x="93.6877%" y="287.50"></text></g><g><title>__tcp_transmit_skb (128 samples, 0.21%)</title><rect x="93.4040%" y="309" width="0.2058%" height="15" fill="rgb(238,160,17)"/><text x="93.6540%" y="319.50"></text></g><g><title>__tcp_push_pending_frames (140 samples, 0.23%)</title><rect x="93.3959%" y="341" width="0.2251%" height="15" fill="rgb(214,148,48)"/><text x="93.6459%" y="351.50"></text></g><g><title>tcp_write_xmit (139 samples, 0.22%)</title><rect x="93.3975%" y="325" width="0.2235%" height="15" fill="rgb(232,36,49)"/><text x="93.6475%" y="335.50"></text></g><g><title>__release_sock (219 samples, 0.35%)</title><rect x="93.3734%" y="389" width="0.3522%" height="15" fill="rgb(209,103,24)"/><text x="93.6234%" y="399.50"></text></g><g><title>tcp_v4_do_rcv (212 samples, 0.34%)</title><rect x="93.3847%" y="373" width="0.3409%" height="15" fill="rgb(229,88,8)"/><text x="93.6347%" y="383.50"></text></g><g><title>tcp_rcv_established (212 samples, 0.34%)</title><rect x="93.3847%" y="357" width="0.3409%" height="15" fill="rgb(213,181,19)"/><text x="93.6347%" y="367.50"></text></g><g><title>release_sock (281 samples, 0.45%)</title><rect x="93.3091%" y="405" width="0.4518%" height="15" fill="rgb(254,191,54)"/><text x="93.5591%" y="415.50"></text></g><g><title>ip_local_out (86 samples, 0.14%)</title><rect x="94.3752%" y="325" width="0.1383%" height="15" fill="rgb(241,83,37)"/><text x="94.6252%" y="335.50"></text></g><g><title>__ip_local_out (85 samples, 0.14%)</title><rect x="94.3768%" y="309" width="0.1367%" height="15" fill="rgb(233,36,39)"/><text x="94.6268%" y="319.50"></text></g><g><title>nf_hook_slow (77 samples, 0.12%)</title><rect x="94.3897%" y="293" width="0.1238%" height="15" fill="rgb(226,3,54)"/><text x="94.6397%" y="303.50"></text></g><g><title>__dev_queue_xmit (103 samples, 0.17%)</title><rect x="94.5682%" y="293" width="0.1656%" height="15" fill="rgb(245,192,40)"/><text x="94.8182%" y="303.50"></text></g><g><title>sock_def_readable (1,964 samples, 3.16%)</title><rect x="95.2693%" y="85" width="3.1581%" height="15" fill="rgb(238,167,29)"/><text x="95.5193%" y="95.50">soc..</text></g><g><title>__wake_up_common_lock (1,958 samples, 3.15%)</title><rect x="95.2789%" y="69" width="3.1485%" height="15" fill="rgb(232,182,51)"/><text x="95.5289%" y="79.50">__w..</text></g><g><title>_raw_spin_unlock_irqrestore (1,953 samples, 3.14%)</title><rect x="95.2869%" y="53" width="3.1404%" height="15" fill="rgb(231,60,39)"/><text x="95.5369%" y="63.50">_ra..</text></g><g><title>sock_def_readable (208 samples, 0.33%)</title><rect x="98.4451%" y="69" width="0.3345%" height="15" fill="rgb(208,69,12)"/><text x="98.6951%" y="79.50"></text></g><g><title>__wake_up_common_lock (207 samples, 0.33%)</title><rect x="98.4467%" y="53" width="0.3329%" height="15" fill="rgb(235,93,37)"/><text x="98.6967%" y="63.50"></text></g><g><title>_raw_spin_unlock_irqrestore (207 samples, 0.33%)</title><rect x="98.4467%" y="37" width="0.3329%" height="15" fill="rgb(213,116,39)"/><text x="98.6967%" y="47.50"></text></g><g><title>tcp_data_queue (210 samples, 0.34%)</title><rect x="98.4435%" y="85" width="0.3377%" height="15" fill="rgb(222,207,29)"/><text x="98.6935%" y="95.50"></text></g><g><title>tcp_v4_do_rcv (2,296 samples, 3.69%)</title><rect x="95.1213%" y="117" width="3.6920%" height="15" fill="rgb(206,96,30)"/><text x="95.3713%" y="127.50">tcp_..</text></g><g><title>tcp_rcv_established (2,290 samples, 3.68%)</title><rect x="95.1310%" y="101" width="3.6823%" height="15" fill="rgb(218,138,4)"/><text x="95.3810%" y="111.50">tcp_..</text></g><g><title>ip_local_deliver_finish (2,408 samples, 3.87%)</title><rect x="94.9444%" y="149" width="3.8721%" height="15" fill="rgb(250,191,14)"/><text x="95.1944%" y="159.50">ip_l..</text></g><g><title>tcp_v4_rcv (2,387 samples, 3.84%)</title><rect x="94.9782%" y="133" width="3.8383%" height="15" fill="rgb(239,60,40)"/><text x="95.2282%" y="143.50">tcp_..</text></g><g><title>ip_local_deliver (2,441 samples, 3.93%)</title><rect x="94.9348%" y="165" width="3.9251%" height="15" fill="rgb(206,27,48)"/><text x="95.1848%" y="175.50">ip_l..</text></g><g><title>net_rx_action (2,573 samples, 4.14%)</title><rect x="94.8013%" y="229" width="4.1374%" height="15" fill="rgb(225,35,8)"/><text x="95.0513%" y="239.50">net_r..</text></g><g><title>process_backlog (2,558 samples, 4.11%)</title><rect x="94.8255%" y="213" width="4.1133%" height="15" fill="rgb(250,213,24)"/><text x="95.0755%" y="223.50">proc..</text></g><g><title>__netif_receive_skb_one_core (2,536 samples, 4.08%)</title><rect x="94.8608%" y="197" width="4.0779%" height="15" fill="rgb(247,123,22)"/><text x="95.1108%" y="207.50">__ne..</text></g><g><title>ip_rcv (2,503 samples, 4.02%)</title><rect x="94.9139%" y="181" width="4.0248%" height="15" fill="rgb(231,138,38)"/><text x="95.1639%" y="191.50">ip_r..</text></g><g><title>__local_bh_enable_ip (2,617 samples, 4.21%)</title><rect x="94.7338%" y="293" width="4.2081%" height="15" fill="rgb(231,145,46)"/><text x="94.9838%" y="303.50">__loc..</text></g><g><title>do_softirq.part.19 (2,609 samples, 4.20%)</title><rect x="94.7467%" y="277" width="4.1953%" height="15" fill="rgb(251,118,11)"/><text x="94.9967%" y="287.50">do_so..</text></g><g><title>do_softirq_own_stack (2,594 samples, 4.17%)</title><rect x="94.7708%" y="261" width="4.1712%" height="15" fill="rgb(217,147,25)"/><text x="95.0208%" y="271.50">do_so..</text></g><g><title>__softirqentry_text_start (2,594 samples, 4.17%)</title><rect x="94.7708%" y="245" width="4.1712%" height="15" fill="rgb(247,81,37)"/><text x="95.0208%" y="255.50">__sof..</text></g><g><title>ip_finish_output2 (2,737 samples, 4.40%)</title><rect x="94.5424%" y="309" width="4.4011%" height="15" fill="rgb(209,12,38)"/><text x="94.7924%" y="319.50">ip_fi..</text></g><g><title>__ip_queue_xmit (2,886 samples, 4.64%)</title><rect x="94.3318%" y="341" width="4.6407%" height="15" fill="rgb(227,1,9)"/><text x="94.5818%" y="351.50">__ip_..</text></g><g><title>ip_output (2,773 samples, 4.46%)</title><rect x="94.5135%" y="325" width="4.4590%" height="15" fill="rgb(248,47,43)"/><text x="94.7635%" y="335.50">ip_ou..</text></g><g><title>__tcp_transmit_skb (2,988 samples, 4.80%)</title><rect x="94.2610%" y="357" width="4.8047%" height="15" fill="rgb(221,10,30)"/><text x="94.5110%" y="367.50">__tcp_..</text></g><g><title>sched_clock_cpu (67 samples, 0.11%)</title><rect x="99.0674%" y="357" width="0.1077%" height="15" fill="rgb(210,229,1)"/><text x="99.3174%" y="367.50"></text></g><g><title>__tcp_push_pending_frames (3,238 samples, 5.21%)</title><rect x="94.0697%" y="389" width="5.2067%" height="15" fill="rgb(222,148,37)"/><text x="94.3197%" y="399.50">__tcp_..</text></g><g><title>tcp_write_xmit (3,223 samples, 5.18%)</title><rect x="94.0938%" y="373" width="5.1826%" height="15" fill="rgb(234,67,33)"/><text x="94.3438%" y="383.50">tcp_wr..</text></g><g><title>_copy_from_iter_full (82 samples, 0.13%)</title><rect x="99.2764%" y="389" width="0.1319%" height="15" fill="rgb(247,98,35)"/><text x="99.5264%" y="399.50"></text></g><g><title>__alloc_skb (67 samples, 0.11%)</title><rect x="99.4678%" y="373" width="0.1077%" height="15" fill="rgb(247,138,52)"/><text x="99.7178%" y="383.50"></text></g><g><title>sk_stream_alloc_skb (84 samples, 0.14%)</title><rect x="99.4420%" y="389" width="0.1351%" height="15" fill="rgb(213,79,30)"/><text x="99.6920%" y="399.50"></text></g><g><title>tcp_send_mss (73 samples, 0.12%)</title><rect x="99.6784%" y="389" width="0.1174%" height="15" fill="rgb(246,177,23)"/><text x="99.9284%" y="399.50"></text></g><g><title>__x64_sys_sendto (4,407 samples, 7.09%)</title><rect x="92.7254%" y="453" width="7.0865%" height="15" fill="rgb(230,62,27)"/><text x="92.9754%" y="463.50">__x64_sys_..</text></g><g><title>__sys_sendto (4,386 samples, 7.05%)</title><rect x="92.7592%" y="437" width="7.0527%" height="15" fill="rgb(216,154,8)"/><text x="93.0092%" y="447.50">__sys_sen..</text></g><g><title>tcp_sendmsg (4,126 samples, 6.63%)</title><rect x="93.1772%" y="421" width="6.6346%" height="15" fill="rgb(244,35,45)"/><text x="93.4272%" y="431.50">tcp_sendm..</text></g><g><title>tcp_sendmsg_locked (3,763 samples, 6.05%)</title><rect x="93.7610%" y="405" width="6.0509%" height="15" fill="rgb(251,115,12)"/><text x="94.0110%" y="415.50">tcp_send..</text></g><g><title>entry_SYSCALL_64_after_hwframe (7,268 samples, 11.69%)</title><rect x="88.2439%" y="485" width="11.6870%" height="15" fill="rgb(240,54,50)"/><text x="88.4939%" y="495.50">entry_SYSCALL_64_..</text></g><g><title>do_syscall_64 (7,268 samples, 11.69%)</title><rect x="88.2439%" y="469" width="11.6870%" height="15" fill="rgb(233,84,52)"/><text x="88.4939%" y="479.50">do_syscall_64</text></g><g><title>ksys_write (67 samples, 0.11%)</title><rect x="99.8231%" y="453" width="0.1077%" height="15" fill="rgb(207,117,47)"/><text x="100.0731%" y="463.50"></text></g><g><title>vfs_write (65 samples, 0.10%)</title><rect x="99.8263%" y="437" width="0.1045%" height="15" fill="rgb(249,43,39)"/><text x="100.0763%" y="447.50"></text></g><g><title>__vfs_write (64 samples, 0.10%)</title><rect x="99.8279%" y="421" width="0.1029%" height="15" fill="rgb(209,38,44)"/><text x="100.0779%" y="431.50"></text></g><g><title>all (62,189 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="527.50"></text></g><g><title>tokio-runtime-w (45,571 samples, 73.28%)</title><rect x="26.7218%" y="501" width="73.2782%" height="15" fill="rgb(242,79,21)"/><text x="26.9718%" y="511.50">tokio-runtime-w</text></g></svg></svg>